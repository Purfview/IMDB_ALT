(***************************************************

Ant Movie Catalog importation script
www.antp.be/software/moviecatalog/

[Infos]
Authors=Purfview
Title=IMDB ( via API )
Description=Imports stuff from IMDb's API
Site=https://github.com/Purfview/IMDB_ALT
Language=EN
Version=1.1.0
Requires=4.2.3
Comments=Alternative IMDb script to get info from original API. Aims to be simpler, faster & reliable.
License=MIT License||Copyright (c) 2025 Purfview||Permission is hereby granted, free of charge, to any person obtaining a copy|of this software and associated documentation files (the "Software"), to deal|in the Software without restriction, including without limitation the rights|to use, copy, modify, merge, publish, distribute, sublicense, and/or sell|copies of the Software, and to permit persons to whom the Software is|furnished to do so, subject to the following conditions:||The above copyright notice and this permission notice shall be included in all|copies or substantial portions of the Software.||THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR|IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,|FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE|AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER|LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,|OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE|SOFTWARE.|
GetInfo=1
RequiresMovies=1

[Options]
BatchMode=0|0|0=Normal working mode, prompts user when needed|1=Does not display any window, takes the first movie found|2=Same as 1, but it uses the URL field if available to update movie information
ImageSize=2|2|0=No image|1=x200|2=x500|3=x700|4=x1100|5=x1500
MultipleValuesCategory=1|1|0=Only take first genre for Category|1=Take all genres
MultipleValuesCountry=0|0|0=Only take first country|1=Take all countries
ActorsLimit=0|0|0=10|1=25|2=50|3=250
GetCharacters=0|0|0=Do nothing|1=Pair the actors with the characters
TitleSelection=1|1|1=Retrieve max 5 titles|2=Retrieve max 10 titles|3=Retrieve max 25 titles
SearchWithYear=1|1|0=Do nothing|1=Try to search with a year (a year can be included at the end of a title)
SearchYearDeviation=1|1|0=No deviation|1=deviation by 1 year|2=deviation by 3 years
ShortCountryName=0|0|0=Do nothing|1=Use UK/USA
ConvertToASCII=0|0|0=Do not change special characters and accents.|1=Replace special characters and accents by basic ASCII characters

[Parameters]
IMDB_userID=ur00000000|ur00000000|Your IMDb userID to get "My Rating", your ratings must be set to public.

***************************************************)

(*************** Version History *****************************************************************************

1.1.0 - (2025/07/06) - Improvement: Get the most helpful review instead of "featured" nonsense.
                     - Moved less important options to the bottom.
                     - Remove the escapes from Description.

1.0.9 - (2025/07/05) - Improvement: More options for ImageSize.

1.0.8 - (2025/07/05) - Improvement: Optimized some code - now the script is 4 times faster.

1.0.7 - (2025/07/04) - Improvement: If alt versions available then add all runtimes to Description.
                     - Fixed bug with Comments field.

1.0.6 - (2025/07/02) - Fixed rare Cloudflare/API timeout bug by changing a credits endpoint to a faster one.
                     - Reworked all credits.
                     - Renamed CreditsLimit to ActorsLimit.
                     - Added support to pair the actors with the characters. [GetCharacters option]
                     - Improvement: Adds tagline to Description.

1.0.5 - (2025/06/29) - Added support for "My ratings" field. [IMDB_userID must be set]
                     - Added CreditsLimit option.
                     - Reworked Director/Writer/Actors.
                     - Fixed country errors: 'West Germany','East Germany','Soviet Union','Czechoslovakia',
                                             'Yugoslavia','Zaire','Serbia and Montenegro','Burma'.
                     - Fixed country names: 'Vietnam', 'Czech Republic'.
                     - Fixed: The title search didn't include the adult titles.
                     - Fixed few other bugs.

1.0.4 - (2025/06/29) - Added support for Producer & Composer fields.
                     - Fixed few bugs.

1.0.3 - (2025/06/27) - Fixed: BatchMode 1/2 wasn't working properly.
                     - Auto-remove dots from the titles as IMDb's advanced search doesn't like them
                     - Removed unneeded scripts from "uses".

1.0.2 - (2025/06/27) - Fixed few country names
                     - Remove the escapes from Comment

1.0.1 - (2025/06/27) - File changed to UTF8 [note: AMC does not support UTF8, use UTF8Decode]
                     - The scripts title changed to "IMDB ( via API )"

1.0.0 - (2025/06/26) - The first public release.

*************************************************************************************************************)


program IMDB_ALT;

uses
  StringUtils1;

const
  Query_Search_by_Title          = '{ "query": "query { advancedTitleSearch( first: replace_max_titles constraints: { titleTextConstraint:{searchTerm:\"replace_search_string\"} explicitContentConstraint: { explicitContentFilter: INCLUDE_ADULT } } ) { edges { node { title { titleText { text } releaseYear { year } titleType { text } id principalCredits { category { id } credits { name { nameText { text } } } } } } } } }" }';
  Query_Search_by_Title_and_Year = '{ "query": "query { advancedTitleSearch( first: replace_max_titles constraints: { titleTextConstraint:{searchTerm:\"replace_search_string\"} explicitContentConstraint: { explicitContentFilter: INCLUDE_ADULT } releaseDateConstraint: {releaseDateRange: {start:\"replace_start_year-01-01\",end:\"replace_end_year-12-31\"}} } ) { edges { node { title { titleText { text } releaseYear { year } titleType { text } id principalCredits { category { id } credits { name { nameText { text } } } } } } } } }" }';
  Query_ID = '{ "query": "query { title(id: \"replace_imdbid\") { id titleText { text isOriginalTitle } originalTitleText { text } releaseYear { year } titleGenres { genres { genre { text } } } runtime { seconds } countriesOfOrigin { countries { id } } certificate { rating } titleType { id } taglines(first: 1) { edges { node { text } } } plot { plotText { plainText } } ratingsSummary { aggregateRating } primaryImage { url } runtimes(first: 25) { edges { node { displayableProperty { value { plainText } } seconds attributes { text } country { text } } } } credits(first: 250, filter: { categories: [\"director\", \"producer\", \"writer\", \"composer\"] }) { edges { node { category { categoryId } name { nameText { text } } } } } reviews(first: 15) { edges { node { submissionDate authorRating helpfulness { score } author { nickName } summary { originalText } text { originalText { plainText } } } } } } }" }';
  Query_userRating = '{ "query": "query { title(id: \"replace_imdbid\") { userRating(userId: \"replace_userid\") { value } } }" }';
  Query_actors = '{ "query": "query { title(id: \"replace_imdbid\") { credits(first: replace_max_actors, filter: { categories: [\"cast\"] }) { edges { node { name { nameText { text } } } } } } }" }';
  Query_actors_paired = '{ "query": "query { title(id: \"replace_imdbid\") { credits(first: replace_max_actors, filter: { categories: [\"cast\"] }) { edges { node { name { nameText { text } } ... on Cast { characters { name } } } } } } }" }';

var
  MovieName: string;


//==============================================================================
//    Helping functions
//==============================================================================

function ExpandCountryCode(Code: string): string;
begin
  case UpperCase(Trim(Code)) of
    'AD': Result := 'Andorra';
    'AE': Result := 'United Arab Emirates';
    'AF': Result := 'Afghanistan';
    'AG': Result := 'Antigua And Barbuda';
    'AI': Result := 'Anguilla';
    'AL': Result := 'Albania';
    'AM': Result := 'Armenia';
    'AO': Result := 'Angola';
    'AQ': Result := 'Antarctica';
    'AR': Result := 'Argentina';
    'AS': Result := 'American Samoa';
    'AT': Result := 'Austria';
    'AU': Result := 'Australia';
    'AW': Result := 'Aruba';
    'AX': Result := 'Finland';
    'AZ': Result := 'Azerbaijan';
    'BA': Result := 'Bosnia And Herzegovina';
    'BB': Result := 'Barbados';
    'BD': Result := 'Bangladesh';
    'BE': Result := 'Belgium';
    'BF': Result := 'Burkina Faso';
    'BG': Result := 'Bulgaria';
    'BH': Result := 'Bahrain';
    'BI': Result := 'Burundi';
    'BJ': Result := 'Benin';
    'BL': Result := 'France';
    'BM': Result := 'Bermuda';
    'BN': Result := 'Brunei Darussalam';
    'BO': Result := 'Bolivia';
    'BQ': Result := 'Sint Eustatius And Saba Bonaire';
    'BR': Result := 'Brazil';
    'BS': Result := 'Bahamas';
    'BT': Result := 'Bhutan';
    'BUMM': Result := 'Burma';
    'BV': Result := 'Bouvet Island';
    'BW': Result := 'Botswana';
    'BY': Result := 'Belarus';
    'BZ': Result := 'Belize';
    'CA': Result := 'Canada';
    'CC': Result := 'Cocos Islands';
    'CD': Result := 'Democratic Republic Of The Congo';
    'CF': Result := 'Central African Republic';
    'CG': Result := 'Congo';
    'CH': Result := 'Switzerland';
    'CI': Result := 'Ivory Coast';
    'CK': Result := 'Cook Islands';
    'CL': Result := 'Chile';
    'CM': Result := 'Cameroon';
    'CN': Result := 'China';
    'CO': Result := 'Colombia';
    'CR': Result := 'Costa Rica';
    'CSHH': Result := 'Czechoslovakia';
    'CSXX': Result := 'Serbia and Montenegro';
    'CU': Result := 'Cuba';
    'CV': Result := 'Cabo Verde';
    'CW': Result := 'Curacao';
    'CX': Result := 'Christmas Island';
    'CY': Result := 'Cyprus';
    'CZ': Result := 'Czech Republic';
    'DDDE': Result := 'East Germany';
    'DE': Result := 'Germany';
    'DJ': Result := 'Djibouti';
    'DK': Result := 'Denmark';
    'DM': Result := 'Dominica';
    'DO': Result := 'Dominican Republic';
    'DZ': Result := 'Algeria';
    'EC': Result := 'Ecuador';
    'EE': Result := 'Estonia';
    'EG': Result := 'Egypt';
    'EH': Result := 'Western Sahara';
    'ER': Result := 'Eritrea';
    'ES': Result := 'Spain';
    'ET': Result := 'Ethiopia';
    'FI': Result := 'Finland';
    'FJ': Result := 'Fiji';
    'FK': Result := 'Falkland Islands';
    'FM': Result := 'Micronesia';
    'FO': Result := 'Faroe Islands';
    'FR': Result := 'France';
    'GA': Result := 'Gabon';
    'GB':
      if GetOption('ShortCountryName') = 0 then
        Result := 'United Kingdom'
      else
        Result := 'UK';
    'GD': Result := 'Grenada';
    'GE': Result := 'Georgia';
    'GF': Result := 'French Guiana';
    'GG': Result := 'Guernsey';
    'GH': Result := 'Ghana';
    'GI': Result := 'Gibraltar';
    'GL': Result := 'Greenland';
    'GM': Result := 'Gambia';
    'GN': Result := 'Guinea';
    'GP': Result := 'Guadeloupe';
    'GQ': Result := 'Equatorial Guinea';
    'GR': Result := 'Greece';
    'GS': Result := 'South Georgia And The South Sandwich Islands';
    'GT': Result := 'Guatemala';
    'GU': Result := 'Guam';
    'GW': Result := 'Guinea-Bissau';
    'GY': Result := 'Guyana';
    'HK': Result := 'Hong Kong';
    'HM': Result := 'Heard Island And Mcdonald Islands';
    'HN': Result := 'Honduras';
    'HR': Result := 'Croatia';
    'HT': Result := 'Haiti';
    'HU': Result := 'Hungary';
    'ID': Result := 'Indonesia';
    'IE': Result := 'Ireland';
    'IL': Result := 'Israel';
    'IM': Result := 'Isle Of Man';
    'IN': Result := 'India';
    'IO': Result := 'British Indian Ocean Territory';
    'IQ': Result := 'Iraq';
    'IR': Result := 'Iran';
    'IS': Result := 'Iceland';
    'IT': Result := 'Italy';
    'JE': Result := 'Jersey';
    'JM': Result := 'Jamaica';
    'JO': Result := 'Jordan';
    'JP': Result := 'Japan';
    'KE': Result := 'Kenya';
    'KG': Result := 'Kyrgyzstan';
    'KH': Result := 'Cambodia';
    'KI': Result := 'Kiribati';
    'KM': Result := 'Comoros';
    'KN': Result := 'Saint Kitts And Nevis';
    'KP': Result := 'North Korea';
    'KR': Result := 'South Korea';
    'KW': Result := 'Kuwait';
    'KY': Result := 'Cayman Islands';
    'KZ': Result := 'Kazakhstan';
    'LA': Result := 'Laos';
    'LB': Result := 'Lebanon';
    'LC': Result := 'Saint Lucia';
    'LI': Result := 'Liechtenstein';
    'LK': Result := 'Sri Lanka';
    'LR': Result := 'Liberia';
    'LS': Result := 'Lesotho';
    'LT': Result := 'Lithuania';
    'LU': Result := 'Luxembourg';
    'LV': Result := 'Latvia';
    'LY': Result := 'Libya';
    'MA': Result := 'Morocco';
    'MC': Result := 'Monaco';
    'MD': Result := 'Moldova';
    'ME': Result := 'Montenegro';
    'MF': Result := 'Saint Martin';
    'MG': Result := 'Madagascar';
    'MH': Result := 'Marshall Islands';
    'MK': Result := 'North Macedonia';
    'ML': Result := 'Mali';
    'MM': Result := 'Myanmar';
    'MN': Result := 'Mongolia';
    'MO': Result := 'Macao';
    'MP': Result := 'Northern Mariana Islands';
    'MQ': Result := 'Martinique';
    'MR': Result := 'Mauritania';
    'MS': Result := 'Montserrat';
    'MT': Result := 'Malta';
    'MU': Result := 'Mauritius';
    'MV': Result := 'Maldives';
    'MW': Result := 'Malawi';
    'MX': Result := 'Mexico';
    'MY': Result := 'Malaysia';
    'MZ': Result := 'Mozambique';
    'NA': Result := 'Namibia';
    'NC': Result := 'New Caledonia';
    'NE': Result := 'Niger';
    'NF': Result := 'Norfolk Island';
    'NG': Result := 'Nigeria';
    'NI': Result := 'Nicaragua';
    'NL': Result := 'Netherlands';
    'NO': Result := 'Norway';
    'NP': Result := 'Nepal';
    'NR': Result := 'Nauru';
    'NU': Result := 'Niue';
    'NZ': Result := 'New Zealand';
    'OM': Result := 'Oman';
    'PA': Result := 'Panama';
    'PE': Result := 'Peru';
    'PF': Result := 'French Polynesia';
    'PG': Result := 'Papua New Guinea';
    'PH': Result := 'Philippines';
    'PK': Result := 'Pakistan';
    'PL': Result := 'Poland';
    'PM': Result := 'Saint Pierre And Miquelon';
    'PN': Result := 'Pitcairn';
    'PR': Result := 'Puerto Rico';
    'PS': Result := 'Palestine';
    'PT': Result := 'Portugal';
    'PW': Result := 'Palau';
    'PY': Result := 'Paraguay';
    'QA': Result := 'Qatar';
    'RE': Result := 'France';
    'RO': Result := 'Romania';
    'RS': Result := 'Serbia';
    'RU': Result := 'Russian Federation';
    'RW': Result := 'Rwanda';
    'SA': Result := 'Saudi Arabia';
    'SB': Result := 'Solomon Islands';
    'SC': Result := 'Seychelles';
    'SD': Result := 'Sudan';
    'SE': Result := 'Sweden';
    'SG': Result := 'Singapore';
    'SH': Result := 'Saint Helena';
    'SI': Result := 'Slovenia';
    'SJ': Result := 'Svalbard And Jan Mayen';
    'SK': Result := 'Slovakia';
    'SL': Result := 'Sierra Leone';
    'SM': Result := 'San Marino';
    'SN': Result := 'Senegal';
    'SO': Result := 'Somalia';
    'SR': Result := 'Suriname';
    'SS': Result := 'South Sudan';
    'ST': Result := 'Sao Tome And Principe';
    'SUHH': Result := 'Soviet Union';
    'SV': Result := 'El Salvador';
    'SX': Result := 'Sint Maarten';
    'SY': Result := 'Syria';
    'SZ': Result := 'Eswatini';
    'TC': Result := 'Turks And Caicos Islands';
    'TD': Result := 'Chad';
    'TF': Result := 'French Southern Territories';
    'TG': Result := 'Togo';
    'TH': Result := 'Thailand';
    'TJ': Result := 'Tajikistan';
    'TK': Result := 'Tokelau';
    'TL': Result := 'Timor-Leste';
    'TM': Result := 'Turkmenistan';
    'TN': Result := 'Tunisia';
    'TO': Result := 'Tonga';
    'TR': Result := 'Turkey';
    'TT': Result := 'Trinidad And Tobago';
    'TV': Result := 'Tuvalu';
    'TW': Result := 'Taiwan';
    'TZ': Result := 'Tanzania';
    'UA': Result := 'Ukraine';
    'UG': Result := 'Uganda';
    'UM': Result := 'United States Minor Outlying Islands';
    'US':
      if GetOption('ShortCountryName') = 0 then
        Result := 'United States'
      else
        Result := 'USA';
    'UY': Result := 'Uruguay';
    'UZ': Result := 'Uzbekistan';
    'VA': Result := 'Holy See';
    'VC': Result := 'Saint Vincent And The Grenadines';
    'VE': Result := 'Venezuela';
    'VG': Result := 'Virgin Islands (British)';
    'VI': Result := 'Virgin Islands (U.S.)';
    'VN': Result := 'Vietnam';
    'VU': Result := 'Vanuatu';
    'WF': Result := 'Wallis And Futuna';
    'WS': Result := 'Samoa';
    'XWG': Result := 'West Germany';
    'XYU': Result := 'Yugoslavia';
    'YE': Result := 'Yemen';
    'YT': Result := 'Mayotte';
    'ZA': Result := 'South Africa';
    'ZRCD': Result := 'Zaire';
    'ZM': Result := 'Zambia';
    'ZW': Result := 'Zimbabwe';
  else
  begin
    ShowMessage('Error: Unknown country code! Please report the error.');
    Result := Code;
  end;
  end;
end;


function GetJsonBlock(Json, SearchStr: string): string;
var
  SearchPos, BlockStart, NextOpen, NextClose, CurPos, Level: Integer;
begin
  Result := '';

  SearchPos := Pos(SearchStr, Json);
  if SearchPos = 0 then
    Exit;

  BlockStart := Pos('{', Copy(Json, SearchPos, Length(Json) - SearchPos + 1));
  if BlockStart = 0 then
    Exit;

  BlockStart := BlockStart + SearchPos - 1;

  CurPos := BlockStart + 1;
  Level := 1;

  while Level > 0 do
  begin
    NextOpen := Pos('{', Copy(Json, CurPos, Length(Json) - CurPos + 1));
    if NextOpen > 0 then
      NextOpen := NextOpen + CurPos - 1;

    NextClose := Pos('}', Copy(Json, CurPos, Length(Json) - CurPos + 1));
    if NextClose > 0 then
      NextClose := NextClose + CurPos - 1;

    if (NextOpen > 0) and ((NextOpen < NextClose) or (NextClose = 0)) then
    begin
      Level := Level + 1;
      CurPos := NextOpen + 1;
    end
    else if NextClose > 0 then
    begin
      Level := Level - 1;
      CurPos := NextClose + 1;
    end
    else
      Exit;
  end;
  Result := Copy(Json, BlockStart, CurPos - BlockStart);
end;


function ConvertToASCII(AText: string): string;
begin
  Result := UTF8Decode(AText);
  if Result = '' then
    Result := AText; // in case of a UTF8 decoding error
  if GetOption('ConvertToASCII') = 1 then
    Result := Cp1252ToASCII(Result);
end;


//==============================================================================
//    Select most helpful review
//==============================================================================

function GetMostHelpfulReview(Json: string): string;
var
  Block, ScoreStr: string;
  Score, MaxScore: double;
begin
  Result := '';
  MaxScore := -1;

  while true do
  begin
    Block :=  GetJsonBlock(Json, '"node"');
    if Block = '' then
      break;

    ScoreStr := TextBetween(Block, '"score":', '}');
    if (ScoreStr <> '') and (AnsiCompareStr(ScoreStr, 'null') <> 0) then
    begin
      Score := StrToFloat(Trim(ScoreStr));
      if Score > MaxScore then
      begin
        MaxScore := Score;
        Result := Block;
      end;
    end;
    Json := TextAfter(Json, Block);
  end;
end;


//==============================================================================
//    Extract the title runtimes of the alt versions
//==============================================================================

function ExtractAllRuntimes(Json: string): string;
var
  RuntimesBlock, NodeBlock, PlainText, Seconds, AttributeText, CountryText, ResultText: string;
  Count: Integer;
begin
  ResultText := '';
  RuntimesBlock := GetJsonBlock(Json, '"runtimes":{"edges"');
  /////////////////// Exit if "node" is one or zero
  Count := 0;
  RegExprSet('"node"');
  if RegExprExec(RuntimesBlock) then
  begin
    Count := Count + 1;
    while RegExprExecNext do
      Count := Count + 1;
  end;
  if Count < 2 then
  begin
    Result := '';
    Exit;
  end;
  ///////////////////
  while Pos('"node":{', RuntimesBlock) > 0 do
  begin
    NodeBlock := GetJsonBlock(RuntimesBlock, '"node"');

    PlainText := TextBetween(NodeBlock, '"plainText":"', '"');
    Seconds := TextBetween(NodeBlock, '"seconds":', ',');
    if (AnsiCompareStr(Seconds, 'null') <> 0) and (Seconds <> '') then
      Seconds := IntToStr(StrToInt(Seconds, 10) div 60)
    else
      Seconds := '0';

    AttributeText := TextBetween(NodeBlock, '"attributes":[{"text":"', '"');
    if AttributeText <> '' then
      AttributeText := ' (' + AttributeText + ')'
    else
      AttributeText := '';

    CountryText := TextBetween(NodeBlock, '"country":{"text":"', '"');
    if CountryText <> '' then
      CountryText := ' (' + CountryText + ')'
    else
      CountryText := '';

    if ResultText <> '' then
      ResultText := ResultText + #13#10;
    ResultText := ResultText + PlainText + ' (' + Seconds + ' min)' + AttributeText + CountryText;

    RuntimesBlock := TextAfter(RuntimesBlock, NodeBlock);
  end;
  Result := ResultText;
end;


//==============================================================================
//    Pair Actors with Characters
//==============================================================================

function PairActorsWithCharacters(Json: string): string;
var
  OneCredit, Actor, CharacterBlock, Character, CharacterList: string;
begin
  Result := '';
  while Pos('{', Json) > 0 do
  begin
    OneCredit := GetJsonBlock(Json, '"node"');
    Actor := TextBetween(OneCredit, '"nameText":{"text":"', '"');

    if Pos('"characters":null', OneCredit) > 0 then
    begin
      CharacterList := '';
    end else
    begin
      CharacterBlock := TextBetween(OneCredit, '"characters":[', ']');
      CharacterList := '';

      while Pos('"name":"', CharacterBlock) > 0 do
      begin
        Character := TextBetween(CharacterBlock, '"name":"', '"');
        if CharacterList = '' then
          CharacterList := Character
        else
          CharacterList := CharacterList + ' / ' + Character;
        CharacterBlock := TextAfter(CharacterBlock, Character);
      end;
    end;

    if Actor <> '' then
    begin
      if Result <> '' then
        Result := Result + ', ';

      if CharacterList <> '' then
        Result := Result + Actor + ' ... ' + CharacterList
      else
        Result := Result + Actor;
    end;
    Json := TextAfter(Json, OneCredit);
  end;
end;


//==============================================================================
//    Query IMDb's API
//==============================================================================

function QueryIMDb_API(MovieTitleOrID: string): string;
var
  query, url, contentType, referer, headers, response, replace_max_titles, Year, replace_start_year, replace_end_year: string;
  Deviation: Integer;
  forceHTTP11, forceEncodeParams: Boolean;
begin
  url := 'https://api.graphql.imdb.com';
  contentType := 'application/json';
  headers := 'Content-Type=application/json';
  referer := '';
  forceHTTP11 := True;
  forceEncodeParams := False;

  if RegExprSetExec('tt[0-9]+', MovieTitleOrID) then
  begin
    query := Query_ID;
    query := StringReplace(query, 'replace_imdbid', MovieTitleOrID);
  end else
  begin
    query := Query_Search_by_Title;
    /////////////////////////////// SearchWithYear block
    MovieTitleOrID := Trim(MovieTitleOrID);
    if (GetOption('SearchWithYear') = 1) and (Length(MovieTitleOrID) > 6) and (RegExprSetExec('\d{4}$', MovieTitleOrID)) then
    begin
      Year := RegExprMatch(0);
      if (Copy(Year, 1, 2) = '19') or (Copy(Year, 1, 2) = '20') then
      begin
        MovieTitleOrID := Copy(MovieTitleOrID, 1, Length(MovieTitleOrID) - 4);
        case GetOption('SearchYearDeviation') of
          0:  Deviation := 0;
          1:  Deviation := 1;
          2:  Deviation := 3;
        end;
        replace_start_year := IntToStr(StrToInt(Year, 10) - Deviation);
        replace_end_year := IntToStr(StrToInt(Year, 10) + Deviation);
        query := Query_Search_by_Title_and_Year;
        query := StringReplace(query, 'replace_start_year', replace_start_year);
        query := StringReplace(query, 'replace_end_year', replace_end_year);
      end;
    end;
    ////////////////////////////////////////////////////
    if GetOption('BatchMode') > 0 then
      replace_max_titles := '1'
    else
      case GetOption('TitleSelection') of
        1:  replace_max_titles := '5';
        2:  replace_max_titles := '10';
        3:  replace_max_titles := '25';
    end;
    query := StringReplace(query, 'replace_search_string', MovieTitleOrID);
    query := StringReplace(query, 'replace_max_titles', replace_max_titles);
  end;
  response := PostPage3(url, query, contentType, referer, forceHTTP11, forceEncodeParams, headers);
  response := ConvertToASCII(response);
  Result := response;
end;


//==============================================================================
//    Query IMDb's API2
//==============================================================================

function QueryIMDb_API2(MovieID: string; UserID: string; job: string): string;
var
  query, url, contentType, referer, headers, response, max_actors: string;
  forceHTTP11, forceEncodeParams: Boolean;
begin
  url := 'https://api.graphql.imdb.com';
  contentType := 'application/json';
  headers := 'Content-Type=application/json';
  referer := '';
  forceHTTP11 := True;
  forceEncodeParams := False;

  if job = 'get_myrating' then
  begin
    query := Query_userRating;
    query := StringReplace(query, 'replace_imdbid', MovieID);
    query := StringReplace(query, 'replace_userid', UserID);
  end

  else if (job = 'get_actors') or (job = 'get_actors_paired') then
  begin
    case GetOption('ActorsLimit') of
      0:  max_actors := '10';
      1:  max_actors := '25';
      2:  max_actors := '50';
      3:  max_actors := '250';
    end;
    query := Query_actors;
    if GetOption('GetCharacters') = 1 then
      query := Query_actors_paired;
    query := StringReplace(query, 'replace_imdbid', MovieID);
    query := StringReplace(query, 'replace_max_actors', max_actors);
  end
  else
    ShowMessage('ERROR: Incorrect job for QueryIMDb_API2!');

  response := PostPage3(url, query, contentType, referer, forceHTTP11, forceEncodeParams, headers);
  response := ConvertToASCII(response);
  Result := response;
end;


//==============================================================================
//    Perform search and ask to select a movie from a list
//==============================================================================

procedure SearchForMovie(MovieTitleOrID: string);
var
  Json, imdbID: string;
begin
  Json := QueryIMDb_API(MovieTitleOrID);
  if GetOption('BatchMode') = 0 then
  begin
    PickTreeClear;
    PickTreeAdd('Titles search results', '');
    AddMovieTitles(Json);
    if PickTreeExec(MovieTitleOrID) then
    begin
      if RegExprSetExec('tt[0-9]+', MovieTitleOrID) then
        MovieTitleOrID := RegExprMatch(0);
      GetMovieInfo(MovieTitleOrID);
    end;
  end else
  begin
    imdbID := TextBetween(Json, ',"id":"', '"');
    if (imdbID <> '') then
    begin
      GetMovieInfo(imdbID);
    end;
  end;
end;


//==============================================================================
//    Adds the movie titles found on IMDB to a list
//==============================================================================

function AddMovieTitles(Json: string): Boolean;
var
  Item, Title, Year, TypeText, Id, TitleLine, url, Director: string;
begin
  Result := False;

  while Pos('"node":', Json) > 0 do
  begin
    Item     := GetJsonBlock(Json, '"node"');
    Title    := TextBetween(Item, '"titleText":{"text":"', '"}');
    Year     := TextBetween(Item, '"releaseYear":{"year":', '}');
    TypeText := TextBetween(Item, '"titleType":{"text":"', '"');
    Id       := TextBetween(Item, ',"id":"', '"');
    Director := TextBetween(Item, '"id":"director"},"credits":[{"name":{"nameText":{"text":"', '"');

    if (Title <> '') and (Id <> '') then
    begin
      TitleLine := Title + ' (' + Year + ') - ' + TypeText + ' - ' + Director;
      url := 'https://www.imdb.com/title/' + Id;
      PickTreeAdd(TitleLine, url);
      Result := True;
    end;
    Json := TextAfter(Json, '"node":');
  end;
end;


//==============================================================================
//    Fills the fields with a movie info
//==============================================================================

procedure GetMovieInfo(IMDbID: string);
var
  StrVal1, StrVal2, StrVal3, Json, Json2, originalTitle, TranslatedTitle, PictureHeight, Block, Directors, Writers, Actors, Genres, Countries, Producers, Composers: string;
  runTime: Integer;
begin
  Json := QueryIMDb_API(IMDbID);

  // URL
  if CanSetField(fieldURL) then
  begin
    StrVal1 := 'https://www.imdb.com/title/' + IMDbID;
    SetField(fieldURL, StrVal1);
  end;

  // Original title
  originalTitle := TextBetween(Json, '"originalTitleText":{"text":"', '"}');
  if CanSetField(fieldOriginalTitle) then
  begin
    SetField(fieldOriginalTitle, originalTitle);
  end;

  // Translated title
  if CanSetField(fieldTranslatedTitle) then
  begin
    TranslatedTitle := TextBetween(Json, '"titleText":{"text":"', '",');
    if AnsiCompareStr(TranslatedTitle, originalTitle) <> 0 then
    begin
      SetField(fieldTranslatedTitle, TranslatedTitle);
    end;
  end;

  // Year
  if CanSetField(fieldYear) then
  begin
    StrVal1 := TextBetween(Json, '"releaseYear":{"year":', '}');
    SetField(fieldYear, StrVal1);
  end;

  // Picture
  if CanSetPicture and (GetOption('ImageSize') <> 0) then
  begin
    case GetOption('ImageSize') of
      1:  PictureHeight := '200';
      2:  PictureHeight := '500';
      3:  PictureHeight := '700';
      4:  PictureHeight := '1100';
      5:  PictureHeight := '1500';
      6:  PictureHeight := '2000';
      7:  PictureHeight := '9999';
    end;
    StrVal1 := TextBetween(Json, '"primaryImage":{"url":"', '"}');
    if StrVal1 <> '' then
    begin
      StrVal1 := TextBefore(StrVal1, '._', '') + '._V1_SY' + PictureHeight + '_AL_.jpg';
      GetPicture(StrVal1);
    end;
  end;

  // Length
  if CanSetField(fieldLength) then
  begin
    StrVal1 := TextBetween(Json, '"runtime":{"seconds":', '}');
    if StrVal1 <> '' then
    begin
      StrVal1 := IntToStr(StrToInt(StrVal1, 10) div 60);
      SetField(fieldLength, StrVal1);
    end;
  end;

  // Category (Genres)
  if CanSetField(fieldCategory) then
  begin
    Json2 := GetJsonBlock(Json, '"titleGenres"');
    while Pos('{', Json2) > 0 do
    begin
      Block := GetJsonBlock(Json2, '"genre"');
      Genres := Genres + ', ' + TextBetween(Block, '"text":"', '"');
      Json2 := TextAfter(Json2, Block);
    end;
    if Pos(', ', Genres) = 1 then
      Genres := Copy(Genres, 3, Length(Genres));
    if GetOption('MultipleValuesCategory') = 0 then
      if RegExprSetExec('^[^,]+', Genres) then
        Genres := RegExprMatch(0);
    SetField(fieldCategory, Genres);
  end;

  // Rating
  if CanSetField(fieldRating) then
  begin
    StrVal1 := TextBetween(Json, '"aggregateRating":', '}');
    if (AnsiCompareStr(StrVal1, 'null') <> 0) and (StrVal1 <> '') then
    begin
      StrVal1 := Copy(StrVal1, 1, 3);
      SetField(fieldRating, StrVal1);
    end;
  end;

  // Description (+Tagline) (+all runtimes)
  if CanSetField(fieldDescription) then
  begin
    StrVal1 := TextBetween(Json, '"taglines":{"edges":[{"node":{"text":"', '"}');
    StrVal2 := TextBetween(Json, '"plotText":{"plainText":"', '"}');
    StrVal2 := StringReplace(StrVal2, '\', '');
    StrVal3 := ExtractAllRuntimes(Json);
    if StrVal1 <> '' then
    begin
      StrVal1 := 'Tagline: ' + StrVal1;
      StrVal1 := StrVal1 + #13#10 + #13#10 + StrVal2;
      if StrVal3 <> '' then
        SetField(fieldDescription, StrVal1 + #13#10 #13#10 + 'All runtimes:' + #13#10 + StrVal3)
      else
        SetField(fieldDescription, StrVal1);
    end else
    begin
      if StrVal3 <> '' then
        SetField(fieldDescription, StrVal2 + #13#10 #13#10 + 'All runtimes:' + #13#10 + StrVal3)
      else
        SetField(fieldDescription, StrVal2);
    end;
  end;

  // Country
  if CanSetField(fieldCountry) then
  begin
    Json2 := GetJsonBlock(Json, '"countriesOfOrigin"');
    while Pos('{', Json2) > 0 do
    begin
      Block := TextBetween(Json2, '"id":"', '"');
      Countries := Countries + ', ' + ExpandCountryCode(Block);
      Json2 := TextAfter(Json2, Block);
    end;
    if Pos(', ', Countries) = 1 then
      Countries := Copy(Countries, 3, Length(Countries));
    if GetOption('MultipleValuesCountry') = 0 then
      if RegExprSetExec('^[^,]+', Countries) then
        Countries := RegExprMatch(0);
    SetField(fieldCountry, Countries);
  end;

  // Certification
  if CanSetField(fieldCertification) then
  begin
    StrVal1 := TextBetween(Json, '"certificate":{"rating":"', '"}');
    SetField(fieldCertification, StrVal1);
  end;

  // Comment
  if CanSetField(fieldComments) then
  begin
    Json2 := GetJsonBlock(Json, '"reviews"');
    if Json2 <> '' then
    begin
      Json2 := GetMostHelpfulReview(Json2);
      StrVal1 := TextBetween(Json2, '"summary":{"originalText":"', '"}') + ' ( ' + TextBetween(Json2, '"authorRating":', ',') + '/10 by ' + TextBetween(Json2, '"author":{"nickName":"', '"}') + ' on ' + TextBetween(Json2, '"submissionDate":"', '"') + ' )';
      StrVal2 := TextBetween(Json2, '"text":{"originalText":{"plainText":"', '"}');
      if StrVal2 <> '' then
      begin
        StrVal2 := StringReplace(StrVal2, '\n', #13#10);
        StrVal3 := StringReplace(StrVal1 + #13#10 + #13#10 + StrVal2, '\', '');
        SetField(fieldComments, StrVal3);
      end;
    end;
  end;

  // Director / Writer / Producer / Composer
  if CanSetField(fieldDirector) or CanSetField(fieldWriter) or CanSetField(fieldProducer) or CanSetField(fieldComposer) then
  begin
    Json2 := GetJsonBlock(Json, '"credits":{"edges"');
    while Pos('{', Json2) > 0 do
    begin
      Block := GetJsonBlock(Json2, '"node"');
      if TextBetween(Block, '"categoryId":"', '"') = 'director' then
      begin
        StrVal1 := TextBetween(Block, '"nameText":{"text":"', '"');
        if Directors <> '' then
          Directors := Directors + ', ';
        Directors := Directors + StrVal1;
      end

      else if TextBetween(Block, '"categoryId":"', '"') = 'writer' then
      begin
        StrVal1 := TextBetween(Block, '"nameText":{"text":"', '"');
        if Writers <> '' then
          Writers := Writers + ', ';
        Writers := Writers + StrVal1;
      end

      else if TextBetween(Block, '"categoryId":"', '"') = 'producer' then
      begin
        StrVal1 := TextBetween(Block, '"nameText":{"text":"', '"');
        if Producers <> '' then
          Producers := Producers + ', ';
        Producers := Producers + StrVal1;
      end

      else if TextBetween(Block, '"categoryId":"', '"') = 'composer' then
      begin
        StrVal1 := TextBetween(Block, '"nameText":{"text":"', '"');
        if Composers <> '' then
          Composers := Composers + ', ';
        Composers := Composers + StrVal1;
      end;

      Json2 := TextAfter(Json2, Block);
    end;
    if CanSetField(fieldDirector) then
      SetField(fieldDirector, Directors);
    if CanSetField(fieldWriter) then
      SetField(fieldWriter, Writers);
    if CanSetField(fieldProducer) then
      SetField(fieldProducer, Producers);
    if CanSetField(fieldComposer) then
      SetField(fieldComposer, Composers);
  end;

  // Actors / Actors + Characters
  if CanSetField(fieldActors) then
  begin
    //Sleep(100);
    Json2 := QueryIMDb_API2(IMDbID, 'none', 'get_actors');
    if GetOption('GetCharacters') = 0 then
    begin
      while Pos('{', Json2) > 0 do
      begin
        Block := GetJsonBlock(Json2, '"node"');
        StrVal1 := TextBetween(Block, '"nameText":{"text":"', '"');
        if Actors <> '' then
          Actors := Actors + ', ';
        Actors := Actors + StrVal1;
        Json2 := TextAfter(Json2, Block);
      end;
      SetField(fieldActors, Actors);
    end

    else if GetOption('GetCharacters') = 1 then
    begin
      Actors := PairActorsWithCharacters(Json2);
      if Actors <> '' then
      begin
        Actors := StringReplace(Actors,  ', ', #13#10);
        SetField(fieldActors, Actors);
      end;
    end;
  end;

  // My rating
  if (GetParam('IMDB_userID') <> 'ur00000000') and (GetParam('IMDB_userID') <> '') then
  begin
    if CanSetField(fieldUserRating) then
    begin
      //Sleep(100);
      Json2 := QueryIMDb_API2(IMDbID, GetParam('IMDB_userID'), 'get_myrating');
      StrVal1 := TextBetween(Json2, '"userRating":{"value":', '}');
      if (AnsiCompareStr(StrVal1, 'null') <> 0) and (StrVal1 <> '') then
        SetField(fieldUserRating, StrVal1)
      else if RegExprSetExec('FORBIDDEN', Json2) then
        ShowMessage('ERROR: Your ratings are not public.')
      else if RegExprSetExec('BAD_USER_INPUT', Json2) then
        ShowMessage('ERROR: Wrong IMDB_userID.')
    end;
  end;
end;


//============================================================================//
//================================  MAIN  ====================================//
//============================================================================//


begin
  // ShowMessage(MovieName); // Debug
  // Check for current AMC version
  if CheckVersion(4,2,3) then
  begin
    MovieName := '';
    if GetOption('BatchMode') = 2 then
    begin
      MovieName := GetField(fieldURL);
      if Pos('imdb.com', MovieName) = 0 then
        MovieName := '';
    end;
    if MovieName = '' then
      MovieName := GetField(fieldOriginalTitle);
    if MovieName = '' then
      MovieName := GetField(fieldTranslatedTitle);

    if GetOption('BatchMode') = 0 then
    begin
      if not Input('IMDB Import', 'Enter the title or the IMDB ID/URL:', MovieName) then
        Exit;
    end else
      Sleep(100);

    if MovieName <> '' then
    begin
      if RegExprSetExec('tt[0-9]+', MovieName) then
      begin
        MovieName := RegExprMatch(0);
        GetMovieInfo(MovieName);
      end else
      begin
        MovieName := StringReplace(MovieName, '.', ' ');
        SearchForMovie(MovieName);
      end;
    end;
  end else
    ShowInformation('This script requires a newer version of Ant Movie Catalog, at least the version 4.2.3');
end.
